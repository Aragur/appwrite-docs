<?php

?>

<p>The Appwrite GraphQL API allows you to <b>query</b> and <b>mutate</b> any resource type on your Appwrite server with a single endpoint. Every route available via REST is also available via GraphQL. Additionally, GraphQL provides direct integration with your databases collections.</p>

<p>There are three main features that make GraphQL a great option when compared to the REST API: <b>selection sets</b>, <b>query batching and the database collections integration.</b></p>

<h2><a href="/docs/graphql#selections" id="examples">Selection Sets</a></h2>

<p>Selection sets can be used to tell the GraphQL API exactly which properties of a particular resource you would like to receive in the response. The server will respond with only those properties, nothing more, nothing less. This gives you full control over what data is coming in to your application, instead of the server.</p>

<p>For example, to retrieve only the email of a currently authenticated user, you could execute the <b>accountGet</b> query, passing <b>only</b> email as the selection set.</p>

<div class="ide margin-bottom" data-lang="graphql" data-lang-label="GraphQL">
    <pre class="line-numbers"><code class="prism language-graphql" data-prism>query GetAccount {
    accountGet {
        email
    }
}</code></pre></div>

<p>Given this query, the Appwrite GraphQL API will respond with:</p>

<div class="ide margin-bottom" data-lang="json" data-lang-label="JSON">
    <pre class="line-numbers"><code class="prism language-json" data-prism>{
    "data": {
        "accountGet": {
            "email": "..."
        }
    }
}</code></pre></div>

<p>This can be an extremely useful feature for performance and app responsiveness. As the processing happens on the server, the bandwidth consumed for the request can be <b>dramatically reduced.</b></p>

<h2><a href="/docs/graphql#selections" id="examples">Query Batching</a></h2>

<p>GraphQL allows sending multiple queries or mutations in the same request. If any of the queries fail, the value of the <b>data</b> key for that field will be null, and it will have an <b>errors</b> key instead.</p>

<p>There are two different ways to batch queries. The simplest is to add all queries <b>or</b> mutations into the same query.</p>

<div class="ide margin-bottom" data-lang="graphql" data-lang-label="GraphQL">
    <pre class="line-numbers"><code class="prism language-graphql" data-prism>query GetMany {
    accountGet {
        email
    }
    localeGet {
        ip
        country
    }
}</code></pre></div>

<p>If both queries succeed, the response would look like:</p>

<div class="ide margin-bottom" data-lang="json" data-lang-label="JSON">
    <pre class="line-numbers"><code class="prism language-json" data-prism>{
    "data": {
        "accountGet": {
            "email": "..."
        },
        "localeGet": {
            "ip": "...",
            "country": "..."
        }
    }
}</code></pre></div>

<p>If there was no authenticated user, the <b>accountGet</b> query would fail. In such a case the errors array would be present instead.</p>

<div class="ide margin-bottom" data-lang="json" data-lang-label="JSON">
    <pre class="line-numbers"><code class="prism language-json" data-prism>{
    "data": {
        "accountGet": null,
        "localeGet": {
            "ip": "...",
            "country": "..."
        }
    },
    "errors": [
        {
            "message": "User (role: guest) missing scope (account)",
            "path": ["accountGet"]
        }
    ]
}</code></pre></div>

<p>Batching into a single query has some caveats. Because the root object must be a query <b>or</b> a mutation, all contained queries must queries <b>or</b> mutations.</p>

<p>Additionally, all <b>variables</b> must be passed in the same query, which can be cumbersome and hard to maintain.</p>

<p>The second way is to pass an array of queries in the request. In this way, you can execute queries <b>and</b> mutations, as well as keep variables separate for each.</p>

<div class="ide margin-bottom" data-lang="graphql" data-lang-label="GraphQL">
    <pre class="line-numbers"><code class="prism language-graphql" data-prism>[
    {
        "query": "mutation CreateAccount {
            accountCreate(email: $email, password: $password, name: $name) {
                email
            }
        }",
        "variables": {
            "email": "",
            "password": "",
            "name": ""
        }
    },
    {
        "query": "query GetAccount {
            accountGet {
                email
            }
        }"
    }
]</code></pre></div>

<p>This can be extremely powerful as it allows you to execute complex actions in a single request.</p>

<h2><a href="/docs/graphql#selections" id="examples">Passing Parameters</a></h2>

<p>You can pass parameters to the GraphQL API using the <b>variables</b> key in the request. The variables are passed as a JSON object. They can then be referenced in your query using the `$variableName` syntax as shown above.</p>